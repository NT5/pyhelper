"""Subclass of pyhelper_gui, which is generated by wxFormBuilder."""

import wx
import pyhelper_gui_form

import pyhelper_cf_dialogpost as dialog_post
import pyhelper_cf_dialogfile as dialog_file

from configurator import Configurator

class icon_tray_handle( wx.TaskBarIcon ):
	def __init__(self, frame):
		wx.TaskBarIcon.__init__(self)
		self.frame = frame
		
		img = wx.Image("icon.ico", wx.BITMAP_TYPE_ANY)
		bmp = wx.BitmapFromImage(img)
		self.icon = wx.EmptyIcon()
		self.icon.CopyFromBitmap(bmp)
		
		self.SetIcon(self.icon, "Restore")

		self.Bind(wx.EVT_TASKBAR_LEFT_DOWN, self.OnTaskBarLeftClick)

	def OnTaskBarClose(self, evt):
		self.frame.Close()
		return
		
	def OnTaskBarLeftClick(self, evt):
		if self.frame.IsIconized():
			self.frame.Iconize(False)
		if not self.frame.IsShown():
			self.frame.Show(True)
		self.frame.Raise()
		return

# Implementing pyhelper_gui
class pyhelper_pyhelper_gui( pyhelper_gui_form.pyhelper_gui ):
	def __init__( self, parent ):
		pyhelper_gui_form.pyhelper_gui.__init__( self, parent )
		
		self._configparser = Configurator()
		self._configfile = self._configparser.config_data
		
		self.tbIcon = icon_tray_handle(self)
		self.SetIcon( self.tbIcon.icon )
		
		#Init Toggles
		#Post
		if self._configfile['np']['post']['enable'] == False:
			if self.toggle_post.GetValue() == True:
				self.toggle_post.SetValue( False )
		
		#File
		if self._configfile['np']['file']['enable'] == False:
			if self.toggle_file.GetValue() == True:
				self.toggle_file.SetValue( False )
		
	# Handlers for pyhelper_gui events.
	def close_form( self, event ):
		self._configparser.SaveConfig()
		self.tbIcon.RemoveIcon()
		self.tbIcon.Destroy()
		self.Destroy()
		
	def onMinimize(self, event):
		self.Hide()
		return
		
	def onOutFile( self, event ):
		if self.toggle_file.GetValue() == False:
			self._configfile['np']['file']['enable'] = False
		else:
			self._configfile['np']['file']['enable'] = True
		self._configparser.SaveConfig()
	
	def onTogglePost( self, event ):
		if self.toggle_post.GetValue() == False:
			self._configfile['np']['post']['enable'] = False
		else:
			self._configfile['np']['post']['enable'] = True
		self._configparser.SaveConfig()
	
	def cf_dialogfile( self, event ):
		dia = dialog_file.pyhelper_cf_dialogfile( self )
		dia.ShowModal()
		dia.Destroy()
	
	def cf_dialogpost( self, event ):
		dia = dialog_post.pyhelper_cf_dialogpost( self )
		dia.ShowModal()
		dia.Destroy()
	
	
